<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ExcPerRepMngtDAO">

    <!-- 수행실적신고 관리 목록 아이템   -->
    <resultMap id="excPerRep" type="egovframework.let.epr.service.vo.ResExcPerRepVO">
        <result property="excPerRepSeq" column="EXC_PER_REP_SEQ" />
        <result property="excPerRepName" column="EXC_PER_REP_NAME" />
        <result property="progrsStatCode" column="PROGRS_STAT_CODE" />
        <result property="progrsStatName" column="PROGRS_STAT_NAME" />
        <result property="excDate" column="EXC_DATE" />
        <result property="regDate" column="REG_DATE" />
        <result property="regId" column="REG_ID" />
        <result property="cngDate" column="CNG_DATE" />
        <result property="cngId" column="CNG_ID" />
    </resultMap>

    <!-- 수행실적신고 관리 목록 검색 조건   -->
    <sql id="searchChkExcPerRepList">
        AND DEL_DATE IS NULL
        <if test="searchExcPerRepName != null and searchExcPerRepName !=''">
            AND EXC_PER_REP_NAME LIKE '%' || #{searchExcPerRepName} || '%'
        </if>
        <if test="searchExcDate != null and searchExcDate != ''">
            AND TO_CHAR(EXC_DATE, 'YYYY') = #{searchExcDate}
        </if>
    </sql>

    <!-- 수행실적신고관리 데이터 카운트 -->
    <select id="selectExcPerRepListTotCnt" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepVO" resultType="int">
        SELECT COUNT(EXC_PER_REP_SEQ)
        FROM TB_EXC_REC_REP
        WHERE 1=1
        <include refid="searchChkExcPerRepList" />
    </select>

    <select id="selectExcPerRepList"
            parameterType="egovframework.let.epr.service.vo.ReqExcPerRepVO"
            resultMap="excPerRep">
        SELECT * FROM
        (
            SELECT rownum rn, TB.* FROM
            (
                SELECT
                EXC_PER_REP_SEQ
                , EXC_PER_REP_NAME
                , PROGRS_STAT_CODE
                , (SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = PROGRS_STAT_CODE AND CODE_ID = 'PMS001') AS PROGRS_STAT_NAME
                , TO_CHAR(EXC_DATE, 'YYYY') AS EXC_DATE
                , TO_CHAR(REG_DATE, 'YYYY-MM-DD') AS REG_DATE
                , REG_ID
                , TO_CHAR(CNG_DATE, 'YYYY-MM-DD') AS CNG_DATE
                , CNG_ID
                FROM TB_EXC_REC_REP
                WHERE 1=1
                <include refid="searchChkExcPerRepList" />
                ORDER BY EXC_DATE DESC
            ) TB
        )
        WHERE rn BETWEEN #{firstIndex} + 1 AND #{firstIndex} + #{recordCountPerPage}
    </select>

    <!-- 수행실적 신고 등록 -->
    <insert id="insertExcPerRep"
            parameterType="egovframework.let.epr.service.vo.ReqExcPerRepVO">
        INSERT INTO TB_EXC_REC_REP
        (
            EXC_PER_REP_SEQ
            , EXC_DATE
            , EXC_PER_REP_NAME
            , PROGRS_STAT_CODE
            , REG_DATE
            , REG_ID
            , CNG_DATE
            , CNG_ID
        )
        VALUES
        (
            EXC_PER_REP_SEQ.NEXTVAL
            , TO_DATE(#{excDate}, 'YYYY')
            , #{excPerRepName}
            , '0001'
            , SYSDATE
            , #{regId}
            , SYSDATE
            , #{cngId}
        )
    </insert>

    <!-- 수행실적 신고 상세 조회 시작 -->

    <!-- 수행실적 신고 상세 조회 목록 검색 조건   -->
    <sql id="searchChkExcPerRepDetailList">
        AND DEL_DATE IS NULL
        AND EXC_PER_REP_SEQ = #{inquiryExcPerRepSeq}
    </sql>

    <!-- 수행실적 신고 상세(장비) 아이템 -->
    <resultMap id="eqpmnRep" type="egovframework.let.epr.service.vo.ResEqpmnRepVO">
        <result property="excPerRepSeq" column="EXC_PER_REP_SEQ" />
        <result property="eqpmnNo" column="EQPMN_NO" />
        <result property="eqpmnName" column="EQPMN_NAME" />
        <result property="stndrd" column="STNDRD" />
        <result property="regNo" column="REG_NO" />
        <result property="gradeCode" column="GRAD_CODE" />
        <result property="gradeName" column="GRADE_NAME" />
        <result property="regDate" column="REG_DATE" />
        <result property="regId" column="REG_ID" />
        <result property="cngDate" column="CNG_DATE" />
        <result property="cngId" column="CNG_ID" />
    </resultMap>

    <!-- 수행실적 신고 상세(장비) 카운트 -->
    <select id="selectEqpmnRepListTotCnt" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepDetailVO" resultType="int">
        SELECT
        COUNT(EQPMN_NO)
        FROM TB_EQPMN_REP
        WHERE 1=1
        <include refid="searchChkExcPerRepDetailList" />
    </select>

    <!-- 수행실적 신고상세(장비) 조회 -->
    <select id="selectEqpmnRepList" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepDetailVO" resultMap="eqpmnRep">
        SELECT * FROM
        (
            SELECT rownum rn, TB.* FROM
            (
                SELECT
                EXC_PER_REP_SEQ
                , EQPMN_NO
                , EQPMN_NAME
                , STNDRD
                , REG_NO
                , GRAD_CODE
                , (SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = GRAD_CODE AND CODE_ID = 'PMS002') AS GRADE_NAME
                , TO_CHAR(REG_DATE, 'YYYY-MM-DD') as REG_DATE
                , REG_ID
                , TO_CHAR(CNG_DATE, 'YYYY-MM-DD') as CNG_DATE
                , CNG_ID
                FROM TB_EQPMN_REP ter
                WHERE 1=1
                <include refid="searchChkExcPerRepDetailList" />
                ORDER BY REG_DATE DESC
            ) TB
        )
        WHERE rn BETWEEN #{firstIndex} + 1 AND #{firstIndex} + #{recordCountPerPage}
    </select>

    <!-- 수행실적 신고 상세(실적) 조회 아이템 -->
    <resultMap id="perRep" type="egovframework.let.epr.service.vo.ResPerRepVO">
        <result property="excPerRepSeq" column="EXC_PER_REP_SEQ" />
        <result property="perNo" column="PER_NO" />
        <result property="servcName" column="SERVC_NAME" />
        <result property="servcSeCode" column="SERVC_SE_CODE" />
        <result property="servcSeName" column="SERVC_SE_NAME" />
        <result property="cntrctAmount" column="CNTRCT_AMOUNT" />
        <result property="chargerName" column="CHARGER_NAME" />
        <result property="servc" column="SERVC" />
        <result property="regDate" column="REG_DATE" />
        <result property="regId" column="REG_ID" />
        <result property="cngDate" column="CNG_DATE" />
        <result property="cngId" column="CNG_ID" />
    </resultMap>

    <!-- 수행실적 신고 상세(실적) 조회 카운트 -->
    <select id="selectPerRepListTotCnt" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepDetailVO" resultType="int">
        SELECT
        COUNT(PER_NO)
        FROM TB_PER_REP
        WHERE 1=1
        <include refid="searchChkExcPerRepDetailList" />
    </select>

    <!-- 수행실적 신고 상세(실적) 조회 -->
    <select id="selectPerRepList" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepDetailVO" resultMap="perRep">
        SELECT * FROM
            (
                SELECT rownum rn, TB.* FROM
                (
                    SELECT
                    EXC_PER_REP_SEQ
                    , PER_NO
                    , SERVC_NAME
                    , SERVC_SE_CODE
                    , (SELECT CODE_NM FROM LETTCCMMNDETAILCODE WHERE CODE = SERVC_SE_CODE AND CODE_ID = 'PMS003') AS SERVC_SE_NAME
                    , CNTRCT_AMOUNT
                    , CHARGER_NAME
                    , SERVC
                    , TO_CHAR(REG_DATE, 'YYYY-MM-DD') as REG_DATE
                    , REG_ID
                    , TO_CHAR(CNG_DATE, 'YYYY-MM-DD') as CNG_DATE
                    , CNG_ID
                    FROM TB_PER_REP
                    WHERE 1=1
                    <include refid="searchChkExcPerRepDetailList" />
                    ORDER BY REG_DATE DESC
                ) TB
            )
        WHERE rn BETWEEN #{firstIndex} + 1 AND #{firstIndex} + #{recordCountPerPage}
    </select>
    <!-- 수행실적 신고 상세 조회 끝-->

    <!-- 수행실적 신고 상세 중 장비등록 시작 -->
    <insert id="insertEqpmnRep" parameterType="egovframework.let.epr.service.vo.ReqEqpmnRepVO">
        INSERT INTO TB_EQPMN_REP
        (
            EXC_PER_REP_SEQ
            , EQPMN_NO
            , EQPMN_NAME
            , REG_NO
            , STNDRD
            , GRAD_CODE
            , REG_DATE
            , REG_ID
            , CNG_DATE
            , CNG_ID
        )
        VALUES
        (
            #{excPerRepSeq}
            , #{eqpmnNo}
            , #{eqpmnName}
            , EQPMN_REG_NO.NEXTVAL
            , #{stndrd}
            , #{gradeCode}
            , SYSDATE
            , #{regId}
            , SYSDATE
            , #{cngId}
        )
    </insert>
    <!-- 수행실적 신고 상세 중 장비등록 끝 -->

    <!-- 수행실적 신고 상세 장비목록(체크항목) 삭제처리(SoftDelete) 시작 -->
    <update id="softDeleteEqpmnReps" parameterType="egovframework.let.epr.service.vo.ReqEqpmnRepVO">
        UPDATE TB_EQPMN_REP
        SET
        DEL_DATE = SYSDATE
        , DEL_ID = #{delId}
        WHERE REG_NO IN
        <foreach collection="checkedRegNos" item="regNo" open="(" separator="," close=")">
            #{regNo}
        </foreach>
    </update>
    <!-- 수행실적 신고 상세 장비목록(체크항목) 삭제처리(SoftDelete) 끝 -->

    <!-- 수행실적 신고 상세 중 실적등록 시작 -->
    <!-- 수행실적 신고 상세 중 실적등록 시작 -->
    <insert id="insertPerRep" parameterType="egovframework.let.epr.service.vo.ReqPerRepVO">
        INSERT INTO TB_PER_REP
        (
            EXC_PER_REP_SEQ
            , PER_NO
            , SERVC_NAME
            , SERVC_SE_CODE
            , CNTRCT_AMOUNT
            , CHARGER_NAME
            , SERVC
            , REG_DATE
            , REG_ID
            , CNG_DATE
            , CNG_ID
        )
        VALUES
        (
            #{excPerRepSeq}
            , PER_NO.NEXTVAL
            , #{servcName}
            , #{servcSeCode}
            , #{cntrctAmount}
            , #{chargerName}
            , #{servc}
            , SYSDATE
            , #{regId}
            , SYSDATE
            , #{cngId}
        )
    </insert>

    <!-- 수행실적 신고 상세 실적목록(체크항목) 삭제처리(SoftDelete) 시작 -->
    <update id="softDeletePerReps" parameterType="egovframework.let.epr.service.vo.ReqPerRepVO">
        UPDATE TB_PER_REP
        SET
        DEL_DATE = SYSDATE
        , DEL_ID = #{delId}
        WHERE PER_NO IN
        <foreach collection="checkedPerNos" item="perNo" open="(" separator="," close=")">
            #{perNo}
        </foreach>
    </update>
    <!-- 수행실적 신고 상세 실적목록(체크항목) 삭제처리(SoftDelete) 끝 -->

    <!-- 수행실적 신고 진행상태 변경 ( 작성중 -> 접수대기 ) 시작 -->
    <update id="updateStatusWritingToWait" parameterType="egovframework.let.epr.service.vo.ReqExcPerRepVO">
        UPDATE TB_EXC_REC_REP
        SET
        PROGRS_STAT_CODE = '0002'
        , CNG_DATE = SYSDATE
        , CNG_ID = #{cngId}
        WHERE 1=1
        AND EXC_PER_REP_SEQ = #{excPerRepSeq}
        AND PROGRS_STAT_CODE = '0001'
    </update>
    <!-- 수행실적 신고 진행상태 변경 ( 작성중 -> 접수대기 ) 끝 -->

    <!-- Batch Delete ( SoftDelete 실제 삭제 ) 시작 -->
    <!-- SoftDelete 된 데이터의 조건 시작 -->
    <sql id="softDeletedDataCondition">
        AND DEL_DATE IS NOT NULL
        AND DEL_ID IS NOT NULL
    </sql>
    <!-- SoftDelete 데이터 조회 조건 끝 -->

    <!-- TB_EXC_PER_REP 에서 삭제할 데이터 조회 시작 -->
    <select id="selectExcPerRepDelIsNotNullList" resultMap="excPerRep">
        SELECT
            EXC_PER_REP_SEQ
            , EXC_PER_REP_NAME
            , PROGRS_STAT_CODE
            , EXC_DATE
            , DEL_DATE
            , DEL_ID
        FROM TB_EXC_REC_REP
        WHERE 1=1
        <include refid="softDeletedDataCondition"/>
    </select>
    <!-- TB_EXC_PER_REP 에서 삭제할 데이터 조회 끝 -->

    <!-- 삭제된 TB_EXC_PER_REP 목록 GB_TB_EXC_REC_REP (삭제 테이블)에 등록 시작-->
    <insert id="insertGbExcPerRepList" parameterType="java.util.List">
        INSERT ALL
        <foreach collection="list" item="item">
            INTO GB_TB_EXC_REC_REP
            (
                EXC_PER_REP_SEQ,
                EXC_PER_REP_NAME,
                PROGRS_STAT_CODE,
                EXC_DATE,
                DEL_DATE,
                DEL_ID
            )
            VALUES (
                #{item.excPerRepSeq},
                #{item.excPerRepName},
                #{item.progrsStatCode},
                CASE
                    WHEN REGEXP_LIKE(#{item.excDate}, '^[0-9]{4}$')
                        THEN TO_DATE(#{item.excDate}, 'YYYY')
                        ELSE TO_DATE(#{item.excDate}, 'YYYY-MM-DD HH24:MI:SS')
                END,
                TO_DATE(#{item.delDate}, 'YYYY-MM-DD HH24:MI:SS'),
                #{item.delId}
            )
        </foreach>
        SELECT * FROM dual
    </insert>
    <!-- 삭제된 TB_EXC_PER_REP 목록 GB_TB_EXC_REC_REP (삭제 테이블)에 등록 끝-->

    <!-- GB_TB_EXC_REC_REP 로 softDeleted 데이터 옮긴 후, TB_EXC_REC_REP 에서 삭제 시작 -->
    <delete id="deleteExcPerReps" parameterType="java.util.List">
        DELETE
        FROM TB_EXC_REC_REP
        WHERE
        EXC_PER_REP_SEQ IN
        <foreach collection="deletedSeqList" item="deletedSeq" open="(" separator="," close=")">
            #{deletedSeq}
        </foreach>
        <include refid="softDeletedDataCondition"/>
    </delete>
    <!-- GB_TB_EXC_REC_REP 로 softDeleted 데이터 옮긴 후, TB_EXC_REC_REP 에서 삭제 시작 -->

    <!-- GB_TB_EXC_REC_REP 도 현재 기준으로 N 이전이면 삭제할 데이터 조회 시작 -->
    <select id="selectDeletingGbExcPerReps" resultType="java.lang.String">
        SELECT
            EXC_PER_REP_SEQ
        FROM GB_TB_EXC_REC_REP
        WHERE 1=1
        <![CDATA[ AND DEL_DATE <= ADD_MONTHS(SYSDATE, -12) ]]>
    </select>
    <!-- GB_TB_EXC_REC_REP 도 현재 기준으로 N 이전이면 삭제할 데이터 조회  끝 -->

    <!-- GB_TB_EXC_REC_REP 에서 1년 이상 지난 데이터 삭제 시작 -->
    <delete id="deleteGbExcPerReps" parameterType="java.util.List">
        DELETE
        FROM GB_TB_EXC_REC_REP
        WHERE
        EXC_PER_REP_SEQ IN
        <foreach collection="list"  item="deletedSeq" open="(" separator="," close=")">
            #{deletedSeq}
        </foreach>
    </delete>
    <!-- GB_TB_EXC_REC_REP 에서 1년 이상 지난 데이터 삭제 끝 -->

    <!-- TB_EQPMN_REP 에서 삭제할 데이터 검색 시작 -->
    <select id="selectEQPMNREPDelIsNotNullList" resultMap="eqpmnRep">
        SELECT
            EXC_PER_REP_SEQ
            , EQPMN_NO
            , EQPMN_NAME
            , STNDRD
            , REG_NO
            , GRAD_CODE
            , DEL_DATE
            , DEL_ID
        FROM TB_EQPMN_REP
        WHERE 1=1
        <include refid="softDeletedDataCondition"/>
    </select>
    <!-- TB_EQPMN_REP 에서 삭제할 데이터 검색 끝 -->

    <!-- TB_PER_REP 에서 삭제할 데이터 검색 시작 -->
    <select id="selectPERREPDelIsNotNullList" resultMap="perRep">
        SELECT
            EXC_PER_REP_SEQ
            , PER_NO
            , SERVC_NAME
            , SERVC_SE_CODE
            , CNTRCT_AMOUNT
            , CHARGER_NAME
            , SERVC
            , DEL_DATE
            , DEL_ID
        FROM TB_PRE_REP
        WHERE 1=1
        <include refid="softDeletedDataCondition"/>
    </select>
    <!-- TB_PER_REP 에서 삭제할 데이터 검색 끝 -->
    <!-- Batch Delete ( SoftDelete 실제 삭제 ) 데이터 조회 끝 -->

</mapper>